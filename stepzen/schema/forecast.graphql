interface Forecast {
    number: Int
    name: String
    startTime: String
    endTime: String
    isDaytime: Boolean
    temperature: Float
    temperatureUnit: String
    temperatureTrend: String
    windSpeed: String
    windDirection: String
    icon: String
    shortForecast: String
    detailedForecast: String
}

interface LocationTwo {
    ip: String
    country_code: String
    country_name: String
    region_code: String
    region_name: String
    city: String
    zip_code: String
    time_zone: String
    latitude: Float!
    longitude: Float!
    metro_code: Int
    forecast: Forecast 
        @materializer (query: "getForecast", arguments: [{name: "lat", field: "latitude"},{name:"long",field:"longitude"}])
    
}

interface WeatherReport {
    date: Date!
    latitude: Float!
    longitude: Float!
    temp: Float
    feelsLike: Float
    description: String
    units: String
}

interface Location {
    city: String
    country: String!
    currency: String
    ip: String!
    latitude: Float!
    longitude: Float!
    postalCode: String
    weather: WeatherReport
        @materializer (query: "weatherReport")
}

type OpenWeatherMapReport implements WeatherReport {}

type ForecastGov implements Forecast {}

type IpApi implements Location {}

type FreeGeoIP implements LocationTwo{}

type Query {
    weatherReport (latitude: Float!, longitude: Float!): WeatherReport
    
    openWeatherMapReport (latitude: Float!, longitude: Float!): OpenWeatherMapReport
        @supplies (query: "weatherReport")
        @connector(type: "__openweathermap_weather_location_connector__", configuration: "owm_default")
    
    getForecast(lat: Float!, long: Float!): Forecast
    
    getLocation(ip: String!): LocationTwo
    
    getForecastGov(lat: Float!, long: Float!): ForecastGov
        @supplies(query: "getForecast")
        @rest(endpoint: "https://govwx-zo6fgz3fza-uc.a.run.app/forecast")
    
    getFreeGeoIP(ip: String!): FreeGeoIP
        @supplies(query: "getLocation")
        @rest(endpoint: """https://freegeoip.app/json/{{ .Get \"ip\"}}""")

    location (ip: String!): Location
    ipApi (ip: String!): IpApi
        @supplies (query: "location")
        @connector (type: "__ipapi_location_ip_connector__", configuration: "ipapi_default")
}